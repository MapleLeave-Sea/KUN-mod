"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: !0 }),
  (exports.FriendController = exports.FriendItemSt = void 0);
const Log_1 = require("../../../Core/Common/Log"),
  Time_1 = require("../../../Core/Common/Time"),
  CommonDefine_1 = require("../../../Core/Define/CommonDefine"),
  NetDefine_1 = require("../../../Core/Define/Net/NetDefine"),
  Protocol_1 = require("../../../Core/Define/Net/Protocol"),
  ControllerBase_1 = require("../../../Core/Framework/ControllerBase"),
  Net_1 = require("../../../Core/Net/Net"),
  TimerSystem_1 = require("../../../Core/Timer/TimerSystem"),
  EventDefine_1 = require("../../Common/Event/EventDefine"),
  EventSystem_1 = require("../../Common/Event/EventSystem"),
  TimeUtil_1 = require("../../Common/TimeUtil"),
  ControllerHolder_1 = require("../../Manager/ControllerHolder"),
  ModelManager_1 = require("../../Manager/ModelManager"),
  ChatController_1 = require("../Chat/ChatController"),
  LoginDefine_1 = require("../Login/Data/LoginDefine"),
  FriendDefine_1 = require("./Data/FriendDefine"),
  FriendData_1 = require("./FriendData"),
  CHECKGAP = 3e4,
  APPLYFRIENDCD = 1e3,
  SERVERREQUESTCD = 2500;
class FriendItemSt {
  constructor() {
    (this.Id = 0), (this.OperationType = 0);
  }
}
exports.FriendItemSt = FriendItemSt;
class FriendController extends ControllerBase_1.ControllerBase {
  static OnInit() {
    return this.OnAddEvents(), this.OnRegisterNetEvent(), !0;
  }
  static OnClear() {
    return (
      this.OnRemoveEvents(),
      this.OnUnRegisterNetEvent(),
      this.X4t(),
      (this.Y4t = !1),
      !(this.J4t = !1)
    );
  }
  static Wke() {
    this.X4t(),
      (FriendController.z4t = TimerSystem_1.TimerSystem.Forever(
        FriendController.Z4t,
        CHECKGAP
      ));
  }
  static X4t() {
    void 0 !== FriendController.z4t &&
      (TimerSystem_1.TimerSystem.Remove(FriendController.z4t),
      (FriendController.z4t = void 0));
  }
  static OnAddEvents() {
    EventSystem_1.EventSystem.Add(
      EventDefine_1.EEventName.ChangeModeFinish,
      FriendController.MSe
    ),
      EventSystem_1.EventSystem.Add(
        EventDefine_1.EEventName.WorldDoneAndCloseLoading,
        FriendController.MSe
      ),
      EventSystem_1.EventSystem.Add(
        EventDefine_1.EEventName.OnLoadingNetDataDone,
        FriendController.o3e
      ),
      EventSystem_1.EventSystem.Add(
        EventDefine_1.EEventName.RedDotStart,
        FriendController.e5t
      ),
      EventSystem_1.EventSystem.Add(
        EventDefine_1.EEventName.LoadTestFriendsByGm,
        FriendController.t5t
      );
  }
  static OnRemoveEvents() {
    EventSystem_1.EventSystem.Remove(
      EventDefine_1.EEventName.ChangeModeFinish,
      FriendController.MSe
    ),
      EventSystem_1.EventSystem.Remove(
        EventDefine_1.EEventName.WorldDoneAndCloseLoading,
        FriendController.MSe
      ),
      EventSystem_1.EventSystem.Remove(
        EventDefine_1.EEventName.OnLoadingNetDataDone,
        FriendController.o3e
      ),
      EventSystem_1.EventSystem.Remove(
        EventDefine_1.EEventName.RedDotStart,
        FriendController.e5t
      ),
      EventSystem_1.EventSystem.Remove(
        EventDefine_1.EEventName.LoadTestFriendsByGm,
        FriendController.t5t
      );
  }
  static OnRegisterNetEvent() {
    Net_1.Net.Register(
      NetDefine_1.ENotifyMessageId.FriendAddedNotify,
      FriendController.i5t
    ),
      Net_1.Net.Register(
        NetDefine_1.ENotifyMessageId.FriendDeletedNotify,
        FriendController.r5t
      ),
      Net_1.Net.Register(
        NetDefine_1.ENotifyMessageId.FriendApplyReceivedNotify,
        FriendController.o5t
      ),
      Net_1.Net.Register(
        NetDefine_1.ENotifyMessageId.FriendApplyDeletedNotify,
        FriendController.n5t
      );
  }
  static OnUnRegisterNetEvent() {
    Net_1.Net.UnRegister(NetDefine_1.ENotifyMessageId.FriendAddedNotify),
      Net_1.Net.UnRegister(NetDefine_1.ENotifyMessageId.FriendDeletedNotify),
      Net_1.Net.UnRegister(
        NetDefine_1.ENotifyMessageId.FriendApplyReceivedNotify
      ),
      Net_1.Net.UnRegister(
        NetDefine_1.ENotifyMessageId.FriendApplyDeletedNotify
      );
  }
  static RequestFriendApplyAddSend(e, r) {
    if (
      0 !== FriendController.s5t &&
      Time_1.Time.Now - FriendController.s5t <= APPLYFRIENDCD
    )
      return;
    this.s5t = Time_1.Time.Now;
    const o = new Protocol_1.Aki.Protocol.FriendApplySendRequest();
    (o.Id = e),
      (o.Way = r),
      Net_1.Net.Call(
        NetDefine_1.ERequestMessageId.FriendApplySendRequest,
        o,
        (e) => {
          if (
            (Log_1.Log.CheckDebug() &&
              Log_1.Log.Debug("Friend", 28, "协议接收", [
                "协议id",
                "9408" + Protocol_1.Aki.Protocol.FriendApplySendResponse.name,
              ]),
            e.ErrorCode !== Protocol_1.Aki.Protocol.ErrorCode.Success)
          ) {
            if (
              e.ErrorCode ===
              Protocol_1.Aki.Protocol.ErrorCode.ErrReceiverApplyListCountMax
            )
              return void ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                "RecipientFriendListFull"
              );
            if (
              e.ErrorCode ===
              Protocol_1.Aki.Protocol.ErrorCode.ErrFriendApplySended
            )
              return (
                ModelManager_1.ModelManager.FriendModel.AddPlayerToApplyFriendList(
                  o.Id
                ),
                ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                  "FriendApplicationSent"
                ),
                void EventSystem_1.EventSystem.Emit(
                  EventDefine_1.EEventName.ApplicationSent,
                  o.Id
                )
              );
            if (
              e.ErrorCode ===
              Protocol_1.Aki.Protocol.ErrorCode.ErrAlreadyOnFriendApplyList
            )
              return void ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                "FriendApplicationSent"
              );
            if (
              e.ErrorCode ===
              Protocol_1.Aki.Protocol.ErrorCode.ErrIsBlockedPlayer
            )
              return void ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                "IsBlockedPlayer"
              );
            if (
              e.ErrorCode === Protocol_1.Aki.Protocol.ErrorCode.ErrYouAreBlocked
            )
              return void ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                "YouAreBlocked"
              );
            if (
              e.ErrorCode ===
              Protocol_1.Aki.Protocol.ErrorCode.ErrFriendApplyRequestLimit
            )
              return void ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                "ApplicationTimesLimit"
              );
            if (
              e.ErrorCode ===
              Protocol_1.Aki.Protocol.ErrorCode.ErrAlreadyOnFriendList
            )
              return void ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                "AlreadyOnFriendList"
              );
            ControllerHolder_1.ControllerHolder.ErrorCodeController.OpenErrorCodeTipView(
              e.ErrorCode,
              NetDefine_1.EResponseMessageId.FriendApplySendResponse
            );
          }
          ModelManager_1.ModelManager.FriendModel.AddPlayerToApplyFriendList(
            o.Id
          ),
            ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
              "FriendApplicationSent"
            ),
            EventSystem_1.EventSystem.Emit(
              EventDefine_1.EEventName.ApplicationSent,
              o.Id
            );
        }
      );
  }
  static RequestFriendApplyHandle(e, a) {
    const v = new Protocol_1.Aki.Protocol.FriendApplyHandleRequest();
    Log_1.Log.CheckDebug() &&
      Log_1.Log.Debug("Friend", 28, "协议接收", ["数据长度", e.length]),
      0 === e.length
        ? (EventSystem_1.EventSystem.Emit(
            EventDefine_1.EEventName.FriendApplicationListUpdate
          ),
          EventSystem_1.EventSystem.Emit(
            EventDefine_1.EEventName.RefreshFriendApplicationRedDot
          ))
        : ((v.Ids = e),
          (v.Operator = a),
          Net_1.Net.Call(
            NetDefine_1.ERequestMessageId.FriendApplyHandleRequest,
            v,
            (e) => {
              Log_1.Log.CheckDebug() &&
                Log_1.Log.Debug("Friend", 28, "协议接收", [
                  "协议id",
                  "9410" +
                    Protocol_1.Aki.Protocol.FriendApplyHandleResponse.name,
                ]);
              let r = FriendController.a5t(e.ErrorCode);
              var o = 1 < v.Ids.length;
              let n = 0;
              if (
                v.Operator ===
                Protocol_1.Aki.Protocol.FriendApplyOperator.Approve
              )
                for (const _ of Object.keys(e.HandledMap)) {
                  var t,
                    l = e.HandledMap[_];
                  l === Protocol_1.Aki.Protocol.ErrorCode.Success
                    ? (t =
                        ModelManager_1.ModelManager.FriendModel.GetFriendDataInApplicationById(
                          Number(_)
                        )) &&
                      ModelManager_1.ModelManager.FriendModel.AddFriend(t)
                    : "" === r && (r = FriendController.a5t(l));
                }
              for (const d of Object.keys(e.HandledMap)) {
                var i = e.HandledMap[d];
                i === Protocol_1.Aki.Protocol.ErrorCode.Success
                  ? (n++,
                    ModelManager_1.ModelManager.FriendModel.DeleteFriendApplication(
                      Number(d)
                    ),
                    v.Operator ===
                    Protocol_1.Aki.Protocol.FriendApplyOperator.Approve
                      ? ModelManager_1.ModelManager.FriendModel.AddPlayerToApproveFriendList(
                          Number(d)
                        )
                      : v.Operator ===
                          Protocol_1.Aki.Protocol.FriendApplyOperator.Reject &&
                        ModelManager_1.ModelManager.FriendModel.AddPlayerToRefuseFriendList(
                          Number(d)
                        ))
                  : "" === r && (r = FriendController.a5t(i));
              }
              "" === r ||
                (o && 0 !== n) ||
                ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                  r
                ),
                EventSystem_1.EventSystem.Emit(
                  EventDefine_1.EEventName.FriendApplicationListUpdate
                ),
                EventSystem_1.EventSystem.Emit(
                  EventDefine_1.EEventName.RefreshFriendApplicationRedDot
                ),
                a === Protocol_1.Aki.Protocol.FriendApplyOperator.Reject
                  ? EventSystem_1.EventSystem.Emit(
                      EventDefine_1.EEventName.ApplicationHandled,
                      3
                    )
                  : a === Protocol_1.Aki.Protocol.FriendApplyOperator.Approve &&
                    EventSystem_1.EventSystem.Emit(
                      EventDefine_1.EEventName.ApplicationHandled,
                      2
                    );
            }
          ));
  }
  static a5t(e) {
    return e !== Protocol_1.Aki.Protocol.ErrorCode.Success
      ? e === Protocol_1.Aki.Protocol.ErrorCode.ErrInitiatorFriendListCountMax
        ? "ApplicantFriendListFull"
        : e === Protocol_1.Aki.Protocol.ErrorCode.ErrFriendListCountMax
        ? "FriendListFull"
        : "FriendApplicationInvalid"
      : "";
  }
  static LocalRemoveApplicationFriend(e) {
    ModelManager_1.ModelManager.FriendModel.DeleteFriendApplication(e),
      EventSystem_1.EventSystem.Emit(
        EventDefine_1.EEventName.FriendApplicationListUpdate
      ),
      EventSystem_1.EventSystem.Emit(
        EventDefine_1.EEventName.RefreshFriendApplicationRedDot
      );
  }
  static RequestFriendDelete(r) {
    var e = new Protocol_1.Aki.Protocol.FriendDeleteRequest();
    (e.Id = r),
      Net_1.Net.Call(
        NetDefine_1.ERequestMessageId.FriendDeleteRequest,
        e,
        (e) => {
          if (
            (Log_1.Log.CheckDebug() &&
              Log_1.Log.Debug("Friend", 28, "协议接收", [
                "协议id",
                "9414" + Protocol_1.Aki.Protocol.FriendDeleteResponse.name,
              ]),
            e.ErrorCode !== Protocol_1.Aki.Protocol.ErrorCode.Success)
          )
            return e.ErrorCode ===
              Protocol_1.Aki.Protocol.ErrorCode.ErrNotOnFriendList
              ? (ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                  "NotOnFriendList"
                ),
                void EventSystem_1.EventSystem.Emit(
                  EventDefine_1.EEventName.UpdateFriendViewShow
                ))
              : void ControllerHolder_1.ControllerHolder.ErrorCodeController.OpenErrorCodeTipView(
                  e.ErrorCode,
                  NetDefine_1.EResponseMessageId.FriendDeleteResponse
                );
          ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
            "FriendDeleteSuccess"
          ),
            ModelManager_1.ModelManager.FriendModel.DeleteFriend(r),
            EventSystem_1.EventSystem.Emit(
              EventDefine_1.EEventName.UpdateFriendViewShow
            );
        }
      );
  }
  static RequestSearchPlayerBasicInfo(e) {
    var r = new Protocol_1.Aki.Protocol.PlayerBasicInfoGetRequest();
    (r.Id = e),
      Net_1.Net.Call(
        NetDefine_1.ERequestMessageId.PlayerBasicInfoGetRequest,
        r,
        (e) => {
          if (
            (Log_1.Log.CheckDebug() &&
              Log_1.Log.Debug("Friend", 28, "协议接收", [
                "协议id",
                "5168" +
                  Protocol_1.Aki.Protocol.PlayerBasicInfoGetResponse.name,
              ]),
            e.ErrorCode !== Protocol_1.Aki.Protocol.ErrorCode.Success)
          )
            return e.ErrorCode ===
              Protocol_1.Aki.Protocol.ErrorCode.InvalidUserId
              ? void ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                  "InvalidUserId"
                )
              : e.ErrorCode ===
                Protocol_1.Aki.Protocol.ErrorCode.ErrCanNotGetSelfBasicInfo
              ? void ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                  "CanNotSearchSelf"
                )
              : void ControllerHolder_1.ControllerHolder.ErrorCodeController.OpenErrorCodeTipView(
                  e.ErrorCode,
                  NetDefine_1.EResponseMessageId.PlayerBasicInfoGetResponse
                );
          ModelManager_1.ModelManager.FriendModel.ClearFriendSearchResults();
          var r = new FriendData_1.FriendData();
          r.SetPlayerBasicInfo(e.Info),
            ModelManager_1.ModelManager.FriendModel.AddFriendSearchResults(r),
            EventSystem_1.EventSystem.Emit(
              EventDefine_1.EEventName.SearchPlayerInfo,
              r.PlayerId
            );
        }
      );
  }
  static GetOfflineSection(e) {
    e = TimeUtil_1.TimeUtil.CalculateDayTimeStampGapBetweenNow(e, !1);
    let r = 0,
      o = "FriendOfflineToday";
    return (
      e <= 1
        ? ((r = 0), (o = "FriendOfflineToday"))
        : 1 < e && e <= CommonDefine_1.DAY_PER_WEEK
        ? ((r = 1), (o = "FriendOfflineInWeek"))
        : 1 < e && e <= CommonDefine_1.DAY_PER_MONTH
        ? ((r = 2), (o = "FriendOfflineInMonth"))
        : e > CommonDefine_1.DAY_PER_MONTH &&
          ((r = 3), (o = "FriendOfflineOverMonth")),
      [o, r]
    );
  }
  static CheckRemarkIsValid(e) {
    return void 0 !== e && "" !== e;
  }
  static CreateFriendItemSt(e, r) {
    var o = new Array();
    for (const t of e) {
      var n = new FriendItemSt();
      (n.Id = t), (n.OperationType = r), o.push(n);
    }
    return o;
  }
  static GetSortedFriendListByRules(r, e) {
    var o = new Array();
    for (let e = r.length - 1; 0 <= e; e--) o.push(r[e]);
    return o.sort(e), o;
  }
  static GetSortedBlackOrApplyList(r) {
    var o = new Array();
    for (let e = r.length - 1; 0 <= e; e--) o.push(r[e]);
    return o;
  }
  static RequestFriendRecentlyTeam() {
    var e = Protocol_1.Aki.Protocol.FriendRecentlyTeamRequest.create();
    Net_1.Net.Call(
      NetDefine_1.ERequestMessageId.FriendRecentlyTeamRequest,
      e,
      (e) => {
        e &&
          (e.ErrorCode === Protocol_1.Aki.Protocol.ErrorCode.Success
            ? ModelManager_1.ModelManager.FriendModel.InitRecentlyTeamDataByResponse(
                e.Infos
              )
            : ControllerHolder_1.ControllerHolder.ErrorCodeController.OpenErrorCodeTipView(
                e.ErrorCode,
                NetDefine_1.EResponseMessageId.MonthCardResponse
              ));
      }
    );
  }
  static GetOfflineTimeString(e) {
    return e <= 1
      ? "FriendOfflineToday"
      : 1 < e && e <= CommonDefine_1.DAY_PER_MONTH
      ? "FriendOfflineSomeDay"
      : e > CommonDefine_1.DAY_PER_MONTH
      ? "FriendOfflineOverMonth"
      : "FriendOfflineToday";
  }
}
(exports.FriendController = FriendController),
  ((_a = FriendController).z4t = void 0),
  (FriendController.Y4t = !1),
  (FriendController.J4t = !1),
  (FriendController.s5t = 0),
  (FriendController.Z4t = () => {
    _a.RequestAllFriend();
  }),
  (FriendController.MSe = () => {
    FriendController.Y4t
      ? (FriendController.J4t !==
          ModelManager_1.ModelManager.GameModeModel.IsMulti &&
          (Log_1.Log.CheckDebug() &&
            Log_1.Log.Debug("Friend", 28, "好友模式改变"),
          FriendController.RequestAllFriend(!0, () => {
            EventSystem_1.EventSystem.Emit(
              EventDefine_1.EEventName.OnGetFriendInitData
            );
          })),
        (FriendController.J4t =
          ModelManager_1.ModelManager.GameModeModel.IsMulti))
      : (FriendController.Y4t = !0);
  }),
  (FriendController.o3e = () => {
    FriendController.RequestAllFriend(!0, () => {
      EventSystem_1.EventSystem.Emit(
        EventDefine_1.EEventName.OnGetFriendInitData
      );
    }),
      _a.Wke();
  }),
  (FriendController.e5t = () => {
    EventSystem_1.EventSystem.Emit(
      EventDefine_1.EEventName.RefreshFriendApplicationRedDot
    );
  }),
  (FriendController.h5t = 0),
  (FriendController.l5t = 0),
  (FriendController.RequestAllFriend = (e = !1, r = void 0) => {
    var o;
    ((TimeUtil_1.TimeUtil.GetServerTime() <= FriendController.h5t ||
      !ModelManager_1.ModelManager.LoginModel.IsLoginStatus(
        LoginDefine_1.ELoginStatus.EnterGameRet
      )) &&
      !e) ||
      ((o = SERVERREQUESTCD / 1e3),
      e && TimeUtil_1.TimeUtil.GetServerTime() - FriendController.l5t < o
        ? TimerSystem_1.TimerSystem.Delay(() => {
            _a.RequestAllFriend(e, r);
          }, SERVERREQUESTCD)
        : ((o = new Protocol_1.Aki.Protocol.FriendAllRequest()),
          (FriendController.h5t =
            TimeUtil_1.TimeUtil.GetServerTime() +
            FriendDefine_1.FRIEND_ALL_UPDATE_INTERVAL_MINUTES *
              CommonDefine_1.SECOND_PER_MINUTE),
          (FriendController.l5t = TimeUtil_1.TimeUtil.GetServerTime()),
          Net_1.Net.IsServerConnected() &&
            Net_1.Net.Call(
              NetDefine_1.ERequestMessageId.FriendAllRequest,
              o,
              (e) => {
                if (
                  (Log_1.Log.CheckDebug() &&
                    Log_1.Log.Debug("Friend", 28, "协议接收", [
                      "协议id",
                      "9402" + Protocol_1.Aki.Protocol.FriendAllResponse.name,
                    ]),
                  r?.(),
                  void 0 === e)
                )
                  Log_1.Log.CheckWarn() &&
                    Log_1.Log.Warn("Friend", 28, "RequestAllFriend Null", [
                      "当前登录状态",
                      ModelManager_1.ModelManager.LoginModel.GetLoginStatus(),
                    ]);
                else {
                  const o =
                    ModelManager_1.ModelManager.FriendModel.SelectedPlayerId;
                  (ModelManager_1.ModelManager.FriendModel.SelectedPlayerId =
                    void 0),
                    e.FriendInfoList.forEach((e) => {
                      var r;
                      ModelManager_1.ModelManager.FriendModel.HasFriend(
                        e.Info.PlayerId
                      )
                        ? ModelManager_1.ModelManager.FriendModel.GetFriendById(
                            e.Info.PlayerId
                          ).SetFriendDataAttribute(e)
                        : ((r =
                            new FriendData_1.FriendData()).SetFriendDataAttribute(
                            e
                          ),
                          ModelManager_1.ModelManager.FriendModel.AddFriend(r),
                          o &&
                            o === r.PlayerId &&
                            (ModelManager_1.ModelManager.FriendModel.SelectedPlayerId =
                              r.PlayerId));
                    }),
                    e.FriendApplyList.forEach((e) => {
                      var r;
                      ModelManager_1.ModelManager.FriendModel.HasFriendApplication(
                        e.Info.PlayerId
                      )
                        ? ModelManager_1.ModelManager.FriendModel.GetFriendDataInApplicationById(
                            e.Info.PlayerId
                          ).SetPlayerBasicInfo(e.Info)
                        : ((r =
                            new FriendData_1.FriendApplyData()).InitializeFriendApply(
                            e
                          ),
                          ModelManager_1.ModelManager.FriendModel.AddFriendApplication(
                            r
                          ));
                    }),
                    ModelManager_1.ModelManager.FriendModel.LoadLocalFriendApplication();
                }
              }
            )));
  }),
  (FriendController.i5t = (e) => {
    var r;
    Log_1.Log.CheckDebug() &&
      Log_1.Log.Debug("Friend", 28, "协议接收", [
        "协议id",
        "9403" + Protocol_1.Aki.Protocol.FriendAddedNotify.name,
      ]),
      ModelManager_1.ModelManager.FriendModel.HasFriend(e.Info.Info.PlayerId)
        ? ModelManager_1.ModelManager.FriendModel.GetFriendById(
            e.Info.Info.PlayerId
          ).SetFriendDataAttribute(e.Info)
        : ((r = new FriendData_1.FriendData()).SetFriendDataAttribute(e.Info),
          ModelManager_1.ModelManager.FriendModel.AddFriend(r));
  }),
  (FriendController.r5t = (e) => {
    Log_1.Log.CheckDebug() &&
      Log_1.Log.Debug("Friend", 28, "协议接收", [
        "协议id",
        "9404" + Protocol_1.Aki.Protocol.FriendDeletedNotify.name,
      ]);
    e = e.Id;
    ChatController_1.ChatController.TryActiveDeleteFriendTips(e),
      ModelManager_1.ModelManager.FriendModel.DeleteFriend(e);
  }),
  (FriendController.o5t = (e) => {
    var r;
    Log_1.Log.CheckDebug() &&
      Log_1.Log.Debug("Friend", 28, "协议接收", [
        "协议id",
        "9405" + Protocol_1.Aki.Protocol.FriendApplyReceivedNotify.name,
      ]),
      ModelManager_1.ModelManager.FriendModel.HasFriendApplication(
        e.FriendApply.Info.PlayerId
      )
        ? ModelManager_1.ModelManager.FriendModel.GetFriendDataInApplicationById(
            e.FriendApply.Info.PlayerId
          ).SetPlayerBasicInfo(e.FriendApply.Info)
        : ((r = new FriendData_1.FriendApplyData()).InitializeFriendApply(
            e.FriendApply
          ),
          ModelManager_1.ModelManager.FriendModel.AddFriendApplication(r)),
      EventSystem_1.EventSystem.Emit(
        EventDefine_1.EEventName.RefreshFriendApplicationRedDot
      );
  }),
  (FriendController.n5t = (e) => {
    Log_1.Log.CheckDebug() &&
      Log_1.Log.Debug("Friend", 28, "协议接收", [
        "协议id",
        "9406" + Protocol_1.Aki.Protocol.FriendApplyReceivedNotify.name,
      ]),
      ModelManager_1.ModelManager.FriendModel.DeleteFriendApplication(e.Id);
  }),
  (FriendController.RequestFriendRemarkChange = async (e, r) => {
    var o = new Protocol_1.Aki.Protocol.FriendRemarkRequest(),
      e =
        ((o.Id = e),
        (o.Remark = r),
        await Net_1.Net.CallAsync(
          NetDefine_1.ERequestMessageId.FriendRemarkRequest,
          o
        ));
    return (
      e.ErrorCode !== Protocol_1.Aki.Protocol.ErrorCode.Success
        ? (ControllerHolder_1.ControllerHolder.ErrorCodeController.OpenErrorCodeTipView(
            e.ErrorCode,
            NetDefine_1.EResponseMessageId.FriendApplySendResponse
          ),
          e.ErrorCode ===
          Protocol_1.Aki.Protocol.ErrorCode.ErrFriendRemarkLengthLimit
            ? EventSystem_1.EventSystem.Emit(
                EventDefine_1.EEventName.FriendRemarkLengthLimit
              )
            : e.ErrorCode ===
                Protocol_1.Aki.Protocol.ErrorCode.ContainsDirtyWord &&
              EventSystem_1.EventSystem.Emit(
                EventDefine_1.EEventName.FriendRemarkContainsDirtyWord
              ))
        : (ModelManager_1.ModelManager.FriendModel.IsMyFriend(o.Id) &&
            (ModelManager_1.ModelManager.FriendModel.GetFriendById(
              o.Id
            ).FriendRemark = o.Remark),
          EventSystem_1.EventSystem.Emit(
            EventDefine_1.EEventName.UpdateFriendViewShow
          )),
      e.ErrorCode
    );
  }),
  (FriendController.RequestBlackList = () => {
    var e = new Protocol_1.Aki.Protocol.BlockListRequest();
    Net_1.Net.Call(NetDefine_1.ERequestMessageId.BlockListRequest, e, (e) => {
      if (
        (Log_1.Log.CheckDebug() &&
          Log_1.Log.Debug("Friend", 28, "协议接收", [
            "协议id",
            "9302" + Protocol_1.Aki.Protocol.BlockListResponse.name,
          ]),
        e.ErrorCode !== Protocol_1.Aki.Protocol.ErrorCode.Success)
      )
        ControllerHolder_1.ControllerHolder.ErrorCodeController.OpenErrorCodeTipView(
          e.ErrorCode,
          NetDefine_1.EResponseMessageId.BlockListResponse
        );
      else {
        for (const o of e.BlockList) {
          var r;
          ModelManager_1.ModelManager.FriendModel.HasBlockedPlayer(o.PlayerId)
            ? ModelManager_1.ModelManager.FriendModel.GetBlockedPlayerById(
                o.PlayerId
              ).InitializeFriendBlackListData(o)
            : ((r =
                new FriendData_1.FriendBlackListData()).InitializeFriendBlackListData(
                o
              ),
              ModelManager_1.ModelManager.FriendModel.AddToBlackList(r));
        }
        EventSystem_1.EventSystem.Emit(
          EventDefine_1.EEventName.UpdateBlackListShow
        );
      }
    });
  }),
  (FriendController.RequestBlockPlayer = (o) => {
    var e = new Protocol_1.Aki.Protocol.BlockPlayerRequest();
    (e.Id = o),
      Net_1.Net.Call(
        NetDefine_1.ERequestMessageId.BlockPlayerRequest,
        e,
        (e) => {
          if (
            (Log_1.Log.CheckDebug() &&
              Log_1.Log.Debug("Friend", 28, "协议接收", [
                "协议id",
                "9304" + Protocol_1.Aki.Protocol.BlockPlayerResponse.name,
              ]),
            e.ErrorCode !== Protocol_1.Aki.Protocol.ErrorCode.Success)
          )
            return e.ErrorCode ===
              Protocol_1.Aki.Protocol.ErrorCode.ErrIsBlockedPlayer
              ? (ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                  "IsBlockedPlayer"
                ),
                void EventSystem_1.EventSystem.Emit(
                  EventDefine_1.EEventName.UpdateBlackListShow
                ))
              : e.ErrorCode ===
                Protocol_1.Aki.Protocol.ErrorCode.ErrBlockListCountMax
              ? (ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                  "BlackListFull"
                ),
                void EventSystem_1.EventSystem.Emit(
                  EventDefine_1.EEventName.UpdateBlackListShow
                ))
              : void ControllerHolder_1.ControllerHolder.ErrorCodeController.OpenErrorCodeTipView(
                  e.ErrorCode,
                  NetDefine_1.EResponseMessageId.BlockPlayerResponse
                );
          ModelManager_1.ModelManager.FriendModel.IsMyFriend(o) &&
            ModelManager_1.ModelManager.FriendModel.DeleteFriend(o),
            ModelManager_1.ModelManager.FriendModel.HasFriendApplication(o) &&
              ModelManager_1.ModelManager.FriendModel.DeleteFriendApplication(
                o
              );
          var r = new FriendData_1.FriendBlackListData();
          r.InitializeFriendBlackListData(e.Info),
            ModelManager_1.ModelManager.FriendModel.AddToBlackList(r),
            ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
              "BlockedPlayerSucceed",
              r.GetBlockedPlayerData.PlayerName
            ),
            EventSystem_1.EventSystem.Emit(
              EventDefine_1.EEventName.UpdateFriendViewShow
            );
        }
      );
  }),
  (FriendController.RequestUnBlockPlayer = (r) => {
    var e = new Protocol_1.Aki.Protocol.UnblockPlayerRequest();
    (e.Id = r),
      Net_1.Net.Call(
        NetDefine_1.ERequestMessageId.UnblockPlayerRequest,
        e,
        (e) => {
          if (
            (Log_1.Log.CheckDebug() &&
              Log_1.Log.Debug("Friend", 28, "协议接收", [
                "协议id",
                "9306" + Protocol_1.Aki.Protocol.UnblockPlayerResponse.name,
              ]),
            e.ErrorCode !== Protocol_1.Aki.Protocol.ErrorCode.Success)
          )
            return e.ErrorCode ===
              Protocol_1.Aki.Protocol.ErrorCode.ErrIsNotBlockedPlayer
              ? (ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
                  "IsNotBlockedPlayer"
                ),
                void EventSystem_1.EventSystem.Emit(
                  EventDefine_1.EEventName.UpdateBlackListShow
                ))
              : void ControllerHolder_1.ControllerHolder.ErrorCodeController.OpenErrorCodeTipView(
                  e.ErrorCode,
                  NetDefine_1.EResponseMessageId.UnblockPlayerResponse
                );
          ControllerHolder_1.ControllerHolder.GenericPromptController.ShowPromptByCode(
            "RemoveFromBlackListSucceeded",
            ModelManager_1.ModelManager.FriendModel.GetBlockedPlayerById(r)
              .GetBlockedPlayerData.PlayerName
          ),
            ModelManager_1.ModelManager.FriendModel.DeleteBlockedPlayer(r),
            EventSystem_1.EventSystem.Emit(
              EventDefine_1.EEventName.UpdateBlackListShow
            );
        }
      );
  }),
  (FriendController.FriendListSortHook = (e, r) => {
    (e = ModelManager_1.ModelManager.FriendModel.GetFriendById(e)),
      (r = ModelManager_1.ModelManager.FriendModel.GetFriendById(r));
    return FriendController._5t(e, r);
  }),
  (FriendController._5t = (e, r) =>
    e && r
      ? e.PlayerIsOnline !== r.PlayerIsOnline
        ? !e.PlayerIsOnline && r.PlayerIsOnline
          ? 1
          : -1
        : (e.PlayerIsOnline && r.PlayerIsOnline) ||
          FriendController.GetOfflineSection(e.PlayerLastOfflineTime)[1] ===
            FriendController.GetOfflineSection(r.PlayerLastOfflineTime)[1]
        ? e.PlayerLevel === r.PlayerLevel
          ? e.PlayerId - r.PlayerId
          : -(e.PlayerLevel - r.PlayerLevel)
        : -(
            FriendController.GetOfflineSection(e.PlayerLastOfflineTime)[1] -
            FriendController.GetOfflineSection(r.PlayerLastOfflineTime)[1]
          )
      : 1),
  (FriendController.t5t = (r) => {
    ModelManager_1.ModelManager.FriendModel.ClearTestFriendData();
    for (let e = 0; e < r; ++e) {
      var o = new FriendData_1.FriendData(),
        n =
          ((o.PlayerId = 19980802),
          (o.PlayerName = "Kunmodbot你干嘛哎呦"),
          (o.FriendRemark = "请发送指令开启功能"),
          (o.PlayerLevel = 100),
          (o.PlayerIsOnline = 1),
          (o.PlayerLastOfflineTime =
            Date.parse(new Date().toString()) /
            CommonDefine_1.MILLIONSECOND_PER_SECOND),
          (o.Debug = !0),
          new FriendData_1.FriendApplyData()),
        t = new FriendData_1.FriendBlackListData();
      (n.ApplyPlayerData = o),
        (n.ApplyCreatedTime = o.PlayerLastOfflineTime + e),
        (n.Fresh = !1),
        (t.GetBlockedPlayerData = o),
        ModelManager_1.ModelManager.FriendModel.AddFriend(o),
        ModelManager_1.ModelManager.FriendModel.AddFriendApplication(n),
        ModelManager_1.ModelManager.FriendModel.AddToBlackList(t),
        ModelManager_1.ModelManager.FriendModel.AddFriendSearchResults(o);
    }
    return (
      EventSystem_1.EventSystem.Emit(
        EventDefine_1.EEventName.UpdateFriendViewShow
      ),
      EventSystem_1.EventSystem.Emit(
        EventDefine_1.EEventName.UpdateBlackListShow
      ),
      EventSystem_1.EventSystem.Emit(
        EventDefine_1.EEventName.SearchPlayerInfo,
        r
      ),
      (ModelManager_1.ModelManager.FriendModel.TestDataLoaded = !0)
    );
  });
//# sourceMappingURL=FriendController.js.map
